<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Metalsharp</name>
    </assembly>
    <members>
        <member name="T:Metalsharp.BuildOptions">
            <summary>
            Represents the options when Metalsharp outputs a directory
            </summary>
        </member>
        <member name="P:Metalsharp.BuildOptions.ClearOutputDirectory">
            <summary>
            Whether Metalsharp should remove all the files in the output directory before writing any
            </summary>
        </member>
        <member name="P:Metalsharp.BuildOptions.OutputDirectory">
            <summary>
            The directory to which the files will be output
            </summary>
        </member>
        <member name="T:Metalsharp.IMetalsharpFile">
            <summary>
            Represents the interface for a Metalsharp file
            </summary>
        </member>
        <member name="M:Metalsharp.IMetalsharpFile.IsDescendantOf(System.String)">
            <summary>
            Returns true if the directory is an ancestor of the file
            </summary>
            <param name="directory">The directory in question</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.IMetalsharpFile.IsChildOf(System.String)">
            <summary>
            Returns true if the directory is the parent of the file
            </summary>
            <param name="directory">The directory in question</param>
            <returns></returns>
        </member>
        <member name="P:Metalsharp.IMetalsharpFile.Directory">
            <summary>
            The directory of the file relative to the source directory
            </summary>
        </member>
        <member name="P:Metalsharp.IMetalsharpFile.Extension">
            <summary>
            The extension from the file name
            </summary>
        </member>
        <member name="P:Metalsharp.IMetalsharpFile.FilePath">
            <summary>
            The path of the file
            </summary>
        </member>
        <member name="P:Metalsharp.IMetalsharpFile.Metadata">
            <summary>
            Metadata from the file
            </summary>
        </member>
        <member name="P:Metalsharp.IMetalsharpFile.Name">
            <summary>
            The name of the file, without the extension
            </summary>
        </member>
        <member name="P:Metalsharp.IMetalsharpFile.Text">
            <summary>
            The text of the file
            </summary>
        </member>
        <member name="T:Metalsharp.IMetalsharpFileCollection`1">
            <summary>
            Represents the interface for a collection of Metalsharp files
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Metalsharp.IMetalsharpFileCollection`1.DescendantsOf(System.String)">
            <summary>
            Get the descendant files of a directory
            </summary>
            <param name="directory">The ancestor directory</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.IMetalsharpFileCollection`1.ChildrenOf(System.String)">
            <summary>
            Get the children files of a directory
            </summary>
            <param name="directory">The parent directory</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.IMetalsharpFileCollection`1.ContainsDirectory(System.String)">
            <summary>
            Returns true if one of the files in the collection descends from the directory
            </summary>
            <param name="directory">The directory in question</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.IMetalsharpFileCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Alias List.RemoveAll
            </summary>
        </member>
        <member name="T:Metalsharp.IMetalsharpPlugin">
            <summary>
            Represents a Metalsharp plugin
            </summary>
        </member>
        <member name="M:Metalsharp.IMetalsharpPlugin.Execute(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invokes the plugin. Called by Metalsharp.Use
            </summary>
            <param name="directory">The directory to alter</param>
            <returns>The same directory as was input</returns>
        </member>
        <member name="T:Metalsharp.MetalsharpDirectory">
            <summary>
            Represents a root directory to be manipulated by Metalsharp plugins
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.#ctor">
            <summary>
            Instantiate an empty MetalsharpDirectory
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.#ctor(System.String)">
            <summary>
            Instantiate Metalsharp from an existing directory
            </summary>
            <param name="path">The path to the directory</param>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.#ctor(System.String,System.String)">
            <summary>
            Instantiate Metalsharp from an existing directory and add the contents to a specific virtual path
            </summary>
            <param name="diskPath">The path to the files on disk to add</param>
            <param name="virtualPath">The path of the virtual directory to put the input files into</param>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.From(System.Func{Metalsharp.MetalsharpDirectory,Metalsharp.MetalsharpDirectory})">
            <summary>
            Instantiate Metalsharp by invoking a function as a plugin
            </summary>
            <param name="func">The function to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.From(Metalsharp.IMetalsharpPlugin)">
            <summary>
            Instantiate Metalsharp by invoking a plugin
            </summary>
            <param name="plugin">The plugin to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.From``1">
            <summary>
            Instantiate Metalsharp by invoking a plugin by type
            
            The plugin type must have an empty constructor
            </summary>
            <typeparam name="T">The type of the plugin to invoke</typeparam>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.AddExisting(System.String,System.String,System.Action{Metalsharp.MetalsharpFile})">
            <summary>
            Add an existing file to the input or output and place the files in a specific virtual path
            </summary>
            <param name="diskPath">The path to the file or directory</param>
            <param name="virtualPath">The path to the virtual directory to place the files in</param>
            <param name="add">The function to add the file</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.AddInput(System.String)">
            <summary>
            Add a file or all the files in a directory to the input
            </summary>
            <param name="path">The path to the file or directory</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.AddInput(System.String,System.String)">
            <summary>
            Add a file or all the files in a directory to the input and place the files in a specific virtual path
            </summary>
            <param name="diskPath">The path to the file or directory</param>
            <param name="virtualPath">The path to the virtual directory to place the files in</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.AddInput(Metalsharp.MetalsharpFile)">
            <summary>
            Add a MetalsharpFile to the input files
            </summary>
            <param name="file">The file to add</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.AddOutput(System.String)">
            <summary>
            Add a file or all the files in a directory directly to the output
            
            The file(s) will not be added to the input and JSON metadata in the file(s) will not be parsed
            </summary>
            <param name="path">The path to the file or directory</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.AddOutput(System.String,System.String)">
            <summary>
            Add a file or all the files in a directory directly to the output and place the files in a specific virtual path
            
            The file(s) will not be added to the input and JSON metadata in the file(s) will not be parsed
            </summary>
            <param name="diskPath">The path to the file or directory</param>
            <param name="virtualPath">The path to the virtual directory to place the files in</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.AddOutput(Metalsharp.MetalsharpFile)">
            <summary>
            Add a MetalsharpFile to output files
            </summary>
            <param name="file">The file to add</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.GetFileWithNormalizedDirectory(System.String,System.String)">
            <summary>
            Gets a MetalsharpFile with the RootDirectory removed from its path
            </summary>
            <param name="diskPath">The path to the file or directory</param>
            <param name="virtualPath">The path to the virtual directory to place the files in</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Build">
            <summary>
            Write all the output files to the default output directory
            with default build options
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Build(Metalsharp.BuildOptions)">
            <summary>
            Write all the output files to the output directory
            </summary>
            <param name="options">Metalsmith build configuration options</param>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Build(System.Action{Metalsharp.MetalsharpDirectory})">
            <summary>
            Write all the output files to the default output directory after performing a function
            with default build options
            </summary>
            <param name="func">The function to perform</param>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Build(System.Action{Metalsharp.MetalsharpDirectory},Metalsharp.BuildOptions)">
            <summary>
            Write all the output files to the output directory after performing a function
            </summary>
            <param name="func">The function to perform</param>
            <param name="options">Metalsmith build configuration options</param>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Meta(System.String,System.Object)">
            <summary>
            Add or alter a single item of metadata
            </summary>
            <param name="key">The key to add/update</param>
            <param name="value">The value to store with the key</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Meta(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Add or alter directory-level metadata
            </summary>
            <param name="pairs">The key-value pairs to add/update</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.MoveFiles(System.String,System.String)">
            <summary>
            Move files in the input and output from one directory to another
            </summary>
            <param name="oldDirectory">The directory to move the files from</param>
            <param name="newDirectory">The directory to move the files into</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.MoveFiles(System.Predicate{Metalsharp.IMetalsharpFile},System.String)">
            <summary>
            Move files matching a predicate in the input and output from one directory to another
            </summary>
            <param name="predicate">The predicate to match the files to move</param>
            <param name="newDirectory">The directory to move the files into</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.MoveInput(System.String,System.String)">
            <summary>
            Move files in the input from one directory to another
            </summary>
            <param name="oldDirectory">The directory to move the files from</param>
            <param name="newDirectory">The directory to move the files into</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.MoveInput(System.Predicate{Metalsharp.IMetalsharpFile},System.String)">
            <summary>
            Move files in the input matching a predicate from one directory to another
            </summary>
            <param name="predicate">The predicate to match the files to move</param>
            <param name="newDirectory">The directory to move the files into</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.MoveOutput(System.String,System.String)">
            <summary>
            Move files in the output from one directory to another
            </summary>
            <param name="oldDirectory">The directory to move the files from</param>
            <param name="newDirectory">The directory to move the files into</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.MoveOutput(System.Predicate{Metalsharp.IMetalsharpFile},System.String)">
            <summary>
            Move files in the output matching a predicate from one directory to another
            </summary>
            <param name="predicate">The predicate to match the files to move</param>
            <param name="newDirectory">The directory to move the files into</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.RemoveFiles(System.String)">
            <summary>
            Remove a file from the input and output
            </summary>
            <param name="path">The path of the file to remove</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.RemoveFiles(System.Predicate{Metalsharp.IMetalsharpFile})">
            <summary>
            Remove all the files matching a predicate from the input and output
            </summary>
            <param name="predicate">The predicate function to identify files to delete</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.RemoveInput(System.String)">
            <summary>
            Remove a file from the input
            </summary>
            <param name="path">The path of the file to remove</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.RemoveInput(System.Predicate{Metalsharp.IMetalsharpFile})">
            <summary>
            Remove all the files matching a predicate from the input
            </summary>
            <param name="predicate">The predicate function to identify files to delete</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.RemoveOutput(System.String)">
            <summary>
            Remove a file from the output
            </summary>
            <param name="path">The path of the file to remove</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.RemoveOutput(System.Predicate{Metalsharp.IMetalsharpFile})">
            <summary>
            Remove all the files matching a predicate from the output
            </summary>
            <param name="predicate">The predicate function to identify files to delete</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Use(System.Action{Metalsharp.MetalsharpDirectory})">
            <summary>
            Invoke a function as a plugin
            </summary>
            <param name="func">The function to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Use(Metalsharp.IMetalsharpPlugin)">
            <summary>
            Invoke a plugin
            </summary>
            <param name="plugin">The plugin to invoke</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpDirectory.Use``1">
            <summary>
            Invoke a plugin by type
            
            The plugin type must have an empty constructor
            </summary>
            <typeparam name="T">The type of the plugin to invoke</typeparam>
            <returns></returns>
        </member>
        <member name="E:Metalsharp.MetalsharpDirectory.BeforeUse">
            <summary>
            Invoked before .Use()
            </summary>
        </member>
        <member name="E:Metalsharp.MetalsharpDirectory.AfterUse">
            <summary>
            Invoked after .Use()
            </summary>
        </member>
        <member name="E:Metalsharp.MetalsharpDirectory.BeforeBuild">
            <summary>
            Invoked before .Build()
            </summary>
        </member>
        <member name="E:Metalsharp.MetalsharpDirectory.AfterBuild">
            <summary>
            Invoked after .Build()
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpDirectory.Metadata">
            <summary>
            The directory-level metadata
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpDirectory.InputFiles">
            <summary>
            The input files
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpDirectory.OutputFiles">
            <summary>
            The files to output
            </summary>
        </member>
        <member name="T:Metalsharp.MetalsharpFile">
            <summary>
            Represents a file
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFile.#ctor(System.String,System.String)">
            <summary>
            Instantiate a new MetalsharpFile with no metadata
            </summary>
            <param name="text">The text of the file</param>
            <param name="filePath">The path of the file</param>
        </member>
        <member name="M:Metalsharp.MetalsharpFile.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Instantiate a new MetalsharpFile with the specified metadata
            </summary>
            <param name="text">The text of the file</param>
            <param name="filePath">The path of the file</param>
            <param name="metadata">The metadata of the file</param>
        </member>
        <member name="P:Metalsharp.MetalsharpFile.Directory">
            <summary>
            THe directory of the file relative to the source directory
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpFile.Extension">
            <summary>
            The extension from the file name
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpFile.FilePath">
            <summary>
            The path of the file
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpFile.Metadata">
            <summary>
            Metadata from the file
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpFile.Name">
            <summary>
            The name of the file, without the extension
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpFile.Text">
            <summary>
            The text of the file
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFile.IsDescendantOf(System.String)">
            <summary>
            Returns true if the directory is an ancestor of the file
            </summary>
            <param name="directory">The directory in question</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpFile.IsChildOf(System.String)">
            <summary>
            Returns true if the directory is the parent of the file
            </summary>
            <param name="directory">The directory in question</param>
            <returns></returns>
        </member>
        <member name="T:Metalsharp.MetalsharpFileCollection`1">
            <summary>
            Represents a collection of Metalsharp files
            
            Implements members to handle "virtual" directories
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.#ctor">
            <summary>
            Instantiate an empty collection
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Instantiate a collection with an existing one
            </summary>
            <param name="files"></param>
        </member>
        <member name="F:Metalsharp.MetalsharpFileCollection`1.items">
            <summary>
            The Metalsharp files in the collection
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.DescendantsOf(System.String)">
            <summary>
            Get the descendant files of a directory
            </summary>
            <param name="directory">The ancestor directory</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.ChildrenOf(System.String)">
            <summary>
            Get the children files of a directory
            </summary>
            <param name="directory">The parent directory</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.ContainsDirectory(System.String)">
            <summary>
            Returns true if one of the files in the collection descends from the directory
            </summary>
            <param name="directory">The directory in question</param>
            <returns></returns>
        </member>
        <member name="P:Metalsharp.MetalsharpFileCollection`1.Item(System.Int32)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpFileCollection`1.Count">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="P:Metalsharp.MetalsharpFileCollection`1.IsReadOnly">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.Add(`0)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.Clear">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.Contains(`0)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.GetEnumerator">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.IndexOf(`0)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.Insert(System.Int32,`0)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.Remove(`0)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.RemoveAt(System.Int32)">
            <summary>
            Implements IList
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpFileCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Implements IMetalsharpCollection
            </summary>
        </member>
        <member name="T:Metalsharp.IEnumerableExtensions">
            <summary>
            MetalsharpFileCollection extensions for IEnumerable
            </summary>
        </member>
        <member name="M:Metalsharp.IEnumerableExtensions.ToMetalsharpFileCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Mimic IEnumerable.ToList
            </summary>
            <typeparam name="T">The type of the collection</typeparam>
            <param name="list">The IEnumerable to convert to an IMetalsharpFileCollection</param>
            <returns></returns>
        </member>
        <member name="T:Metalsharp.Branch">
            <summary>
            The Branch plugin
            
            Branches a directory for separate plugins to be computed
            </summary>
        </member>
        <member name="M:Metalsharp.Branch.#ctor(System.Action{Metalsharp.MetalsharpDirectory}[])">
            <summary>
            </summary>
            <param name="branches">The functions defining each branch</param>
        </member>
        <member name="P:Metalsharp.Branch.Branches">
            <summary>
            The function-branches
            </summary>
        </member>
        <member name="M:Metalsharp.Branch.Execute(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invokes the plugin
            </summary>
            <param name="directory"></param>
        </member>
        <member name="T:Metalsharp.Collections">
            <summary>
            Collections plugin
            
            Groups files matching a predicate into collections in the directory metadata
            </summary>
        </member>
        <member name="F:Metalsharp.Collections._definitions">
            <summary>
            Contains the definitions of the collections
            </summary>
        </member>
        <member name="M:Metalsharp.Collections.#ctor(System.ValueTuple{System.String,System.Predicate{Metalsharp.IMetalsharpFile}}[])">
            <summary>
            Instantiates the plugin with the definitions of the collections
            </summary>
            <param name="definitions">The definitions of the collections, including the name of the collection and the predicate which matches its files</param>
        </member>
        <member name="M:Metalsharp.Collections.Execute(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invokes the plugin
            </summary>
            <param name="directory"></param>
        </member>
        <member name="T:Metalsharp.Debug">
            <summary>
            The Debug plugin
            
            Writes a log after every Use, outputting the contents of the input and output directories.
            </summary>
        </member>
        <member name="M:Metalsharp.Debug.#ctor">
            <summary>
            By default, write debug logs with Debug.WriteLine()
            </summary>
        </member>
        <member name="M:Metalsharp.Debug.#ctor(System.String)">
            <summary>
            Configure Debug to write logs to a log file
            </summary>
            <param name="logPath">The path to the log file</param>
        </member>
        <member name="M:Metalsharp.Debug.#ctor(System.Action{System.String})">
            <summary>
            Configure Debug to use custom behavior when writing logs
            </summary>
            <param name="onLog">The action to execute when writing a log</param>
        </member>
        <member name="F:Metalsharp.Debug.OnLog">
            <summary>
            The action to execute when writing a log
            </summary>
        </member>
        <member name="F:Metalsharp.Debug.Uses">
            <summary>
            A count of the number of "Uses" against the directory
            </summary>
        </member>
        <member name="M:Metalsharp.Debug.Execute(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invokes the plugin
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:Metalsharp.Debug.WriteDirectory(Metalsharp.IMetalsharpFileCollection{Metalsharp.MetalsharpFile})">
            <summary>
            Prettify the contents of a collection of files
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="T:Metalsharp.Drafts">
            <summary>
            The Drafts plugin
            
            Removes any input or output file with ("draft", true) in its metadata
            </summary>
        </member>
        <member name="M:Metalsharp.Drafts.Execute(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invokes the plugin
            </summary>
            <param name="directory"></param>
        </member>
        <member name="T:Metalsharp.Frontmatter">
            <summary>
            The Frontmatter plugin
            
            Adds any YAML or JSON frontmatter in the input files to the metadata
            </summary>
        </member>
        <member name="M:Metalsharp.Frontmatter.Execute(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invokes the plugin
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:Metalsharp.Frontmatter.TryGetFrontmatter(System.String,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.String@)">
            <summary>
            Try to parse YAML or JSON frontmatter
            </summary>
            <param name="document">The document containing frontmatter</param>
            <param name="frontmatter">The parsed frontmatter</param>
            <param name="remainder">The document minus the frontmatter text</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.Frontmatter.TryGetYamlFrontmatter(System.String,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.String@)">
            <summary>
            Try to parse YAML frontmatter
            </summary>
            <param name="document">The document containing frontmatter</param>
            <param name="frontmatter">The parsed frontmatter</param>
            <param name="remainder">The document minus the frontmatter text</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.Frontmatter.TryGetJsonFrontmatter(System.String,System.Collections.Generic.Dictionary{System.String,System.Object}@,System.String@)">
            <summary>
            Try to parse JSON frontmatter
            </summary>
            <param name="document">The document containing frontmatter</param>
            <param name="frontmatter">The parsed frontmatter</param>
            <param name="remainder">The document minus the frontmatter text</param>
            <returns></returns>
        </member>
        <member name="T:Metalsharp.Markdown">
            <summary>
            The Markdown plugin
            
            Converts any markdown files to HTML
            </summary>
        </member>
        <member name="M:Metalsharp.Markdown.Execute(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invokes the plugin
            </summary>
            <param name="directory"></param>
        </member>
        <member name="T:Metalsharp.MetalsharpExtensions">
            <summary>
            Extensions to Metalsharp for invoking included plugins
            </summary>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.Branch(Metalsharp.MetalsharpDirectory,System.Action{Metalsharp.MetalsharpDirectory}[])">
            <summary>
            Invoke the Branch plugin
            </summary>
            <returns></returns>
            <param name="directory"></param>
            <param name="branches">The functions to handle each of the branches</param>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.UseCollections(Metalsharp.MetalsharpDirectory,System.ValueTuple{System.String,System.Predicate{Metalsharp.IMetalsharpFile}}[])">
            <summary>
            Invoke the Collections plugin
            </summary>
            <param name="directory"></param>
            <param name="definitions">The definitions of each collection</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.UseDebug(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invoke the default Debug plugin
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.UseDebug(Metalsharp.MetalsharpDirectory,System.String)">
            <summary>
            Invoke the Debug plugin with a log file to capture the debug logs
            </summary>
            <param name="directory"></param>
            <param name="logPath">The path to the log file</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.UseDebug(Metalsharp.MetalsharpDirectory,System.Action{System.String})">
            <summary>
            Invoke the Debug plugin with custom log behavior
            </summary>
            <param name="directory"></param>
            <param name="onLog">The action to execute to log a debug line</param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.UseDrafts(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invoke the Drafts plugin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.UseFrontmatter(Metalsharp.MetalsharpDirectory)">
            <summary>
            
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:Metalsharp.MetalsharpExtensions.UseMarkdown(Metalsharp.MetalsharpDirectory)">
            <summary>
            Invoke the Merkdown plugin
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
